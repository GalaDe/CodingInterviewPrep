"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandBehavior = exports.AwsStub = void 0;
const sinon_1 = require("sinon");
/**
 * Wrapper on the mocked `Client#send()` method,
 * allowing to configure its behavior.
 *
 * Without any configuration, `Client#send()` invocation returns `undefined`.
 *
 * To define resulting variable type easily, use {@link AwsClientStub}.
 */
class AwsStub {
    constructor(send) {
        this.send = send;
        this.anyCommandBehavior = new CommandBehavior(this, send);
    }
    /** Resets stub's history and behavior. */
    reset() {
        this.send.reset();
        return this;
    }
    /** Resets stub's behavior. */
    resetBehavior() {
        this.send.resetBehavior();
        return this;
    }
    /** Resets stub's calls history. */
    resetHistory() {
        this.send.resetHistory();
        return this;
    }
    /** Replaces stub with original `Client#send()` method. */
    restore() {
        this.send.restore();
    }
    /**
     * Returns recorded calls to the stub.
     * Clear history with {@link resetHistory} or {@link reset}.
     */
    calls() {
        return this.send.getCalls();
    }
    /**
     * Returns n-th recorded call to the stub.
     */
    call(n) {
        return this.send.getCall(n);
    }
    /**
     * Returns recorded calls of given Command only.
     * @param commandType Command type to match
     * @param input Command payload to match
     * @param strict Should the payload match strictly (default false, will match if all defined payload properties match)
     */
    commandCalls(commandType, input, strict) {
        return this.send.getCalls()
            .filter((call) => {
            const isProperType = call.args[0] instanceof commandType;
            const inputMatches = this.createInputMatcher(input, strict).test(call.args[0]);
            return isProperType && inputMatches;
        });
    }
    /**
     * Allows specifying the behavior for a given Command type and its input (parameters).
     *
     * If the input is not specified, it will match any Command of that type.
     * @param command Command type to match
     * @param input Command payload to match
     * @param strict Should the payload match strictly (default false, will match if all defined payload properties match)
     */
    on(command, input, strict = false) {
        const matcher = sinon_1.match.instanceOf(command).and(this.createInputMatcher(input, strict));
        const cmdStub = this.send.withArgs(matcher);
        return new CommandBehavior(this, cmdStub);
    }
    /**
     * Allows specifying the behavior for any Command with given input (parameters).
     *
     * If the input is not specified, the given behavior will be used for any Command with any input.
     * This is no different from using {@link resolves}, {@link rejects}, etc. directly,
     * but can be used for readability.
     * @param input Command payload to match
     * @param strict Should the payload match strictly (default false, will match if all defined payload properties match)
     */
    onAnyCommand(input, strict = false) {
        const cmdStub = this.send.withArgs(this.createInputMatcher(input, strict));
        return new CommandBehavior(this, cmdStub);
    }
    createInputMatcher(input, strict = false) {
        return input !== undefined ?
            sinon_1.match.has('input', strict ? input : sinon_1.match(input))
            : sinon_1.match.any;
    }
    /**
     * Sets a successful response that will be returned from any `Client#send()` invocation.
     * @param response Content to be returned
     */
    resolves(response) {
        return this.anyCommandBehavior.resolves(response);
    }
    /**
     * Sets a failure response that will be returned from any `Client#send()` invocation.
     * The response will always be an `Error` instance.
     * @param error Error text, Error instance or Error parameters to be returned
     */
    rejects(error) {
        return this.anyCommandBehavior.rejects(error);
    }
    /**
     * Sets a function that will be called on any `Client#send()` invocation.
     * @param fn Function taking Command input and returning result
     */
    callsFake(fn) {
        return this.anyCommandBehavior.callsFake(fn);
    }
}
exports.AwsStub = AwsStub;
class CommandBehavior {
    constructor(clientStub, send) {
        this.clientStub = clientStub;
        this.send = send;
    }
    /**
     * Sets a successful response that will be returned from the `Client#send()` invocation
     * for specified Command and/or its input.
     * @param response Content to be returned
     */
    resolves(response) {
        this.send.resolves(response);
        return this.clientStub;
    }
    /**
     * Sets a failure response that will be returned from the `Client#send()` invocation
     * for specified Command and/or its input.
     * The response will always be an `Error` instance.
     * @param error Error text, Error instance or Error parameters to be returned
     */
    rejects(error) {
        if (typeof error === 'string') {
            error = new Error(error);
        }
        if (!(error instanceof Error)) {
            error = Object.assign(new Error(), error);
        }
        this.send.rejects(error);
        return this.clientStub;
    }
    /**
     * Sets a function that will be called on `Client#send()` invocation
     * for specified Command and/or its input.
     * @param fn Function taking Command input and returning result
     */
    callsFake(fn) {
        this.send.callsFake(cmd => fn(cmd.input));
        return this.clientStub;
    }
}
exports.CommandBehavior = CommandBehavior;
//# sourceMappingURL=awsClientStub.js.map