Difference between memoization and dynamic programming:

Dynamic programming is typically implemented using tabulation (regular iterative), but can also be implemented using memoization.

    ** Memoization is a term describing an optimization technique where you cache previously computed results, 
                   and return the cached result when the same computation is needed again.

        ** If you use memoization to solve the problem you do it by maintaining a map of already solved sub problems. 
           You do it "top down" in the sense that you solve the "top" problem first (which typically recurses down to solve the sub-problems).

        **  Usually memoization is implemented by recursion

    ** Dynamic programming is a technique for solving problems of recursive nature, iteratively and is applicable 
                           when the computations of the subproblems overlap.


        ** When you solve a dynamic programming problem using tabulation you solve the problem "bottom up", i.e., 
           by solving all related sub-problems first, typically by filling up an n-dimensional table. Based on the results in the table, 
           the solution to the "top" / original problem is then computed.

        ** Tabulation is implemented using iteration.


Important:

There do exist situations where using memoization has advantages. Dynamic programming needs to calculate every subproblem 
because it doesn't know which one will be useful in the future. But memoization only calculate the subproblems related to the original problem. 
Sometimes you may design a DP algorithm with theoretically tremendous amount of dp status. But by careful analyses you find that only an 
acceptable amount of them will be used. In this situation it's preferred to use memoization to avoid huge execution time.

--------------------------------------------------------------------
Memoization Recipe:
--------------------------------------------------------------------

1. Make it work:

    1) Visualize the problem as a tree
    2) Implement the tree using recursion
    3) Test it!!!!

2. Make it efficient:

    1) Add memo object
    2) Add base case to return memo values
    3) Store return values into the memo.

--------------------------------------------------------------------
DP Recipe:
--------------------------------------------------------------------
1. Vizualize the problem as a table
2. Size the table based on the input
3. Initialize the table with default values. 
    For Example: If you need to return true/false. Initialize with true/false.
                 If you need to return value. Initialize with 0s
4. Seed the trivial answer into the table.
    For Example: Fibonacci, the first 2 values 0 and 1
                 TravelerGrid, the grid [1,1] --> 1
5. Fill futher positions based on the current position.
    


----------------------------------
Free-Coding Camp Problems:
----------------------------------

canSum --> 'Can you do it? yes/no'
howSum --> 'How will you do it?'
bestSum --> 'What is the best way to do it?'